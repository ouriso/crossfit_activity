"""empty message

Revision ID: aa8451b4f950
Revises: 
Create Date: 2023-04-23 01:42:23.967180

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'aa8451b4f950'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    op.execute('create schema users')
    op.execute('create schema datasets')
    op.execute('create schema workout')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.BigInteger(), sa.Identity(always=True), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('tg_user_id', sa.BigInteger(), nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('True'), nullable=True),
    sa.Column('role', sa.Enum('USER', 'ADMIN', 'STAFF', name='userrole'), nullable=False),
    sa.Column('added', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('email', name=op.f('uq_user_email')),
    sa.UniqueConstraint('tg_user_id', name=op.f('uq_user_tg_user_id')),
    sa.UniqueConstraint('username', name=op.f('uq_user_username')),
    schema='users'
    )
    op.create_table('exercise_type',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('slug_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('slug_name', name=op.f('pk_exercise_type')),
    sa.UniqueConstraint('name', name=op.f('uq_exercise_type_name')),
    schema='datasets'
    )
    op.create_table('exercises_set_type',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('slug_name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('slug_name', name=op.f('pk_exercises_set_type')),
    sa.UniqueConstraint('name', name=op.f('uq_exercises_set_type_name')),
    schema='datasets'
    )
    op.create_table('workout_of_day',
    sa.Column('rid', sa.UUID(), nullable=False, comment='идентификатор тренировки'),
    sa.Column('base_wod_rid', sa.UUID(), nullable=True, comment='идентификатор тренировки от тренера'),
    sa.Column('training_type', sa.Enum('POWER', 'ENDURANCE', 'FULL_BODY', 'GYM', name='trainingtypes'), nullable=False, comment='тип тренировки'),
    sa.Column('difficulty', sa.Enum('EASY', 'NORMAL', 'HARD', 'HELL', name='difficulty'), nullable=False, comment='субъективная сложность тренировки'),
    sa.Column('action_date', sa.Date(), nullable=False, comment='дата проведения тренировки'),
    sa.Column('creation_date', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True, comment='дата создания тренировки'),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['base_wod_rid'], ['workout.workout_of_day.rid'], name=op.f('fk_workout_of_day_base_wod_rid_workout_of_day'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user.id'], name=op.f('fk_workout_of_day_user_id_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rid', name=op.f('pk_workout_of_day')),
    schema='workout'
    )
    op.create_table('exercises_set',
    sa.Column('rid', sa.UUID(), nullable=False, comment='идентификатор комплекса'),
    sa.Column('wod_id', sa.UUID(), nullable=True, comment='идентификатор тренировки, в которую входит комплекс'),
    sa.Column('set_number', sa.Integer(), nullable=True, comment='порядковый номер комплекса в тренировке'),
    sa.Column('set_type_slug', sa.String(), nullable=True, comment='slug названия комплекса'),
    sa.Column('rounds', sa.Integer(), nullable=True, comment='количество раундов'),
    sa.Column('duration_minutes', sa.Integer(), nullable=True, comment='длительность выполнения комплекса'),
    sa.Column('comment', sa.Text(), nullable=True, comment='комментарий к комплексу'),
    sa.ForeignKeyConstraint(['set_type_slug'], ['datasets.exercises_set_type.slug_name'], name=op.f('fk_exercises_set_set_type_slug_exercises_set_type'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['wod_id'], ['workout.workout_of_day.rid'], name=op.f('fk_exercises_set_wod_id_workout_of_day'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rid', name=op.f('pk_exercises_set')),
    sa.UniqueConstraint('wod_id', 'set_number', name='wod_set_num_uq'),
    schema='workout'
    )
    op.create_table('exercise',
    sa.Column('rid', sa.UUID(), nullable=False, comment='идентификатор упражнения'),
    sa.Column('set_id', sa.UUID(), nullable=True, comment='идентификатор комплекса, в который входит упражнение'),
    sa.Column('exercise_number', sa.Integer(), nullable=True, comment='порядковый номер упражнения в комплексе'),
    sa.Column('exercise_type', sa.String(), nullable=False, comment='slug типа тренировки'),
    sa.Column('rounds', sa.Integer(), nullable=True, comment='количество раундов'),
    sa.Column('weight', sa.Integer(), nullable=True, comment='вес снаряда / дополнительного груза'),
    sa.Column('reps_count', sa.Integer(), nullable=True, comment='количество повторений'),
    sa.Column('duration_minutes', sa.Integer(), nullable=True, comment='длительность выполнения'),
    sa.Column('comment', sa.Text(), nullable=True, comment='комментарий к упражнению'),
    sa.ForeignKeyConstraint(['exercise_type'], ['datasets.exercise_type.slug_name'], name=op.f('fk_exercise_exercise_type_exercise_type'), ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['set_id'], ['workout.exercises_set.rid'], name=op.f('fk_exercise_set_id_exercises_set'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('rid', name=op.f('pk_exercise')),
    sa.UniqueConstraint('set_id', 'exercise_number', name='set_exercise_num_uq'),
    schema='workout'
    )
    op.create_table('set_result',
    sa.Column('set_id', sa.UUID(), nullable=False, comment='идентификатор комплекса, для которого записывается результат'),
    sa.Column('duration_minutes', sa.Integer(), nullable=True, comment='длительность выполнения'),
    sa.Column('comment', sa.Text(), nullable=True, comment='комментарий к результату комплекса'),
    sa.ForeignKeyConstraint(['set_id'], ['workout.exercises_set.rid'], name=op.f('fk_set_result_set_id_exercises_set'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('set_id', name=op.f('pk_set_result')),
    schema='workout'
    )
    op.create_table('exercise_result',
    sa.Column('exercise_id', sa.UUID(), nullable=False, comment='идентификатор упражнения, для которого записывается результат'),
    sa.Column('weights', postgresql.ARRAY(sa.Integer()), nullable=True, comment='список весов снаряда / дополнительного груза в каждом подходе'),
    sa.Column('reps_counts', postgresql.ARRAY(sa.Integer()), nullable=True, comment='список количества повторений в каждом подходе'),
    sa.Column('duration_minutes', postgresql.ARRAY(sa.Integer()), nullable=True, comment='список длительности выполнения в каждом подходе'),
    sa.Column('comment', sa.Text(), nullable=True, comment='комментарий к результату упражнения'),
    sa.ForeignKeyConstraint(['exercise_id'], ['workout.exercise.rid'], name=op.f('fk_exercise_result_exercise_id_exercise'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('exercise_id', name=op.f('pk_exercise_result')),
    schema='workout'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    op.execute('drop schema users')
    op.execute('drop schema datasets')
    op.execute('drop schema workout')
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('exercise_result', schema='workout')
    op.drop_table('set_result', schema='workout')
    op.drop_table('exercise', schema='workout')
    op.drop_table('exercises_set', schema='workout')
    op.drop_table('workout_of_day', schema='workout')
    op.drop_table('exercises_set_type', schema='datasets')
    op.drop_table('exercise_type', schema='datasets')
    op.drop_table('user', schema='users')
    # ### end Alembic commands ###
